import tensorflow as tf

class EUNN(tf.keras.Model):

    def __init__(self, num_classes):
        super(EUNN, self).__init__()

        # Define the hybrid convolutional layers
        self.conv1 = tf.keras.layers.Conv2D(32, kernel_size=(3, 3), activation='relu')
        self.conv2 = tf.keras.layers.Conv2D(64, kernel_size=(3, 3), strides=(2, 2), activation='relu')
        self.conv3 = tf.keras.layers.Conv2D(128, kernel_size=(3, 3), activation='relu')

        # Define the transformer blocks
        self.transformer_1 = tf.keras.layers.TransformerBlock(num_heads=4, embed_dim=128)
        self.transformer_2 = tf.keras.layers.TransformerBlock(num_heads=4, embed_dim=128)

        # Define the depthwise separable convolutions
        self.depthwise_conv1 = tf.keras.layers.DepthwiseConv2D(kernel_size=(3, 3), strides=(2, 2), activation='relu')
        self.pointwise_conv1 = tf.keras.layers.Conv2D(128, kernel_size=(1, 1), activation='relu')

        # Define the adaptive pooling layer
        self.adaptive_pool = tf.keras.layers.AdaptiveAvgPool2D()

        # Define the output layer
        self.output = tf.keras.layers.Dense(num_classes, activation='softmax')

    def call(self, inputs):
        # Pass the input through the hybrid convolutional layers
        x = self.conv1(inputs)
        x = self.conv2(x)
        x = self.conv3(x)

        # Pass the output of the convolutional layers through the transformer blocks
        x = self.transformer_1(x)
        x = self.transformer_2(x)

        # Pass the output of the transformer blocks through the depthwise separable convolutions
        x = self.depthwise_conv1(x)
        x = self.pointwise_conv1(x)

        # Pass the output of the depthwise separable convolutions through the adaptive pooling layer
        x = self.adaptive_pool(x)

        # Pass the output of the adaptive pooling layer through the output layer
        x = self.output(x)

        return x
